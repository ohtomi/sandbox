#!/usr/bin/env python
# -*- coding: utf-8 -*-

APPNAME = 'example'
VERSION = '1.0.0'

top = '.'
out = 'build'

def configure(ctx):
    ctx.load('java')

def build(ctx):
    ctx(name = 'make_directory',
            rule = 'mkdir -p classes/main'
    )

    def _(current_dir, relative_dir):
        import os
        for file in os.listdir(current_dir):
            if (os.path.isdir(os.path.join(current_dir, file))):
                _(os.path.join(current_dir, file), os.path.join(relative_dir, file))
            else:
                ctx(name = 'copy_resources', use = 'make_directory',
                        rule = 'cp ${SRC} ${TGT}',
                        source = os.path.join(current_dir, file),
                        target = os.path.join('classes/main', relative_dir, file)
                )
    _('src/main/resources', '')

    ctx(name = 'compile_sources',
            features = 'javac',
            sourcepath = ['src/main/java', 'src/main/resources'],
            classpath = ['.', '..'],
            compat = '1.8',
            outdir = 'classes/main'
    )

    ctx(name = 'create_jar_file', use = 'compile_sources copy_resources',
            features = 'jar',
            basedir = 'classes/main',
            destfile = '%s-%s.jar' % (APPNAME, VERSION),
    )

    ctx(name = 'generate_javadoc',
            features = 'javadoc',
            srcdir = 'src/main/java',
            javadoc_package = ['com.example'],
            javadoc_output = 'javadoc',
    )

def dist(ctx):
    ctx.base_name = '%s-%s-sources' % (APPNAME, VERSION)
    ctx.algo = 'zip'
